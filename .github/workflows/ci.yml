name: Go CI and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Run tests on every push and pull request
  test:
    name: Test on ${{ matrix.os }}/${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [amd64, arm64]
        go-version: ['1.21']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up QEMU for ARM
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          architecture: ${{ matrix.arch }}

      - name: Tidy dependencies
        run: go mod tidy

      - name: Build
        run: go build -v ./...

      - name: Setup test environment
        run: |
          chmod +x setup_test.sh
          ./setup_test.sh

      - name: Run tests
        run: go test -v ./...

  # Job 2: Create a release when a tag is pushed
  release:
    name: Create GitHub Release
    # This job only runs when a tag is pushed, not on every commit.
    # The tag must follow a semantic versioning pattern like v1.0.0.
    if: startsWith(github.ref, 'refs/tags/v')
    # This job depends on the 'test' job succeeding first.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # GoReleaser needs access to tools for creating .deb packages
      - name: Install dependencies for building deb packages
        run: sudo apt-get update && sudo apt-get install -y dpkg

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # The version of GoReleaser to use
          version: latest
          # The command to run
          args: release --clean
        env:
          # The GITHUB_TOKEN is required to create a GitHub Release.
          # The Actions runner automatically provides this token.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
