name: Go Build and Release

on:
  push:
    branches: ["main"]  # 推送到 main 分支时触发
    tags: ["v*"]  # 添加 tag 触发
  pull_request:
    branches: ["main"]  # 对 main 分支的 PR 时触发

env:
  CGO_ENABLED: 0  # 禁用 CGO，生成纯静态二进制文件

jobs:
  setup-environment:
    runs-on: ubuntu-latest  # 运行在 Ubuntu 最新版本
    outputs:  # 定义这个 job 的输出，供其他 job 使用
      GOFLAGS: ${{ steps.goflags.outputs.GOFLAGS }}
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4  # 检出仓库代码到运行环境
      - name: Set build flags
        id: goflags  # 给这个步骤设置 ID，用于后续引用
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 如果是 tag 触发
            # 去掉 v 前缀得到版本号
            VERSION="${GITHUB_REF_NAME#v}"
            # -ldflags=-w -s：Go 链接器标志，-w 去掉调试信息，-s 去掉符号表
            # -X main.version=${VERSION}：在编译时注入版本信息到 main.version 变量
            echo "GOFLAGS='-ldflags=-w -s -X main.version=${VERSION}'" >> $GITHUB_OUTPUT
          else
            # 如果是分支触发
            echo "GOFLAGS='-ldflags=-w -s'" >> $GITHUB_OUTPUT
          fi
      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 如果是 tag 触发
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            # 如果是分支
            # git rev-parse --short HEAD：获取当前提交的短哈希值
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      matrix:  # 矩阵策略，会为每个组合创建一个 job
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
    env:
      GOFLAGS: ${{ needs.setup-environment.outputs.GOFLAGS }}  # 使用前一个 job 的输出作为环境变量
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4  # 检出代码

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod  # 从 go.mod 读取版本

      - name: Cache Dependencies
        uses: actions/cache@v4  # 缓存 Go 依赖，加速后续构建
        with:
          path: |  # 缓存路径 Go模块缓存 Go构建缓存
            ~/go/pkg/mod 
            ~/.cache/go-build 
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create Output Directory
        run: mkdir -p dist  # 创建 dist 目录

      - name: Build Binary
        run: |
          BINARY_NAME="dirstats"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"  # Windows 需要 .exe 扩展名
          fi
          
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -o "dist/dirstats-${{ matrix.os }}-${{ matrix.arch }}${BINARY_NAME##dirstats}" \
            ./cmd/dirstats/main.go
        env:
          CGO_ENABLED: 0

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [setup-environment, build]  # 依赖前两个 job
    if: startsWith(github.ref, 'refs/tags/')  # 仅在 tag 触发时运行
    permissions:
      contents: write  # 需要写权限来创建 release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*  # 匹配所有 build-* 开头的 artifact
          path: dist/
          merge-multiple: true  # 合并多个 artifact 到同一目录

      - name: Display structure of downloaded files
        run: ls -la dist/  # 列出所有下载的文件

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # 使用当前 tag 名
          name: "Release ${{ needs.setup-environment.outputs.VERSION }}"
          files: dist/*  # 上传所有文件
          generate_release_notes: true  # 自动生成发布说明
          draft: false  # 不是草稿
          prerelease: ${{ contains(github.ref_name, '-') }}  # 如果 tag 包含 '-' 则标记为预发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 非 tag 构建时上传 artifacts
  upload-artifacts:
    runs-on: ubuntu-latest
    needs: [setup-environment, build]
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}  # 仅在非 tag 触发时运行
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: dist/
          merge-multiple: true

      - name: Upload Combined Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dirstats-binaries-${{ needs.setup-environment.outputs.VERSION }}
          path: dist/*
          retention-days: 30
